# Generated by Django 5.1.3 on 2024-12-03 22:24

import django.db.models.deletion
import django.db.models.functions.datetime
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AppUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=64, unique=True)),
                ('password', models.CharField(max_length=32)),
                ('email', models.EmailField(blank=True, max_length=256, null=True)),
                ('image_url', models.URLField(blank=True, max_length=1024, null=True)),
            ],
            options={
                'db_table': 'app_user',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField()),
                ('text', models.TextField(blank=True, null=True)),
                ('image', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'question',
            },
        ),
        migrations.CreateModel(
            name='Option',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(blank=True, null=True)),
                ('number', models.IntegerField()),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='surveys.question')),
            ],
            options={
                'db_table': 'option',
                'unique_together': {('question', 'number')},
            },
        ),
        migrations.CreateModel(
            name='Survey',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=256)),
                ('description', models.TextField(blank=True, max_length=4096, null=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
            ],
            options={
                'db_table': 'survey',
                'constraints': [models.CheckConstraint(condition=models.Q(('start_date__gte', django.db.models.functions.datetime.Now()), models.Q(('end_date__isnull', True), ('start_date__lt', models.F('end_date')), _connector='OR')), name='check_dates')],
            },
        ),
        migrations.AddField(
            model_name='question',
            name='survey',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='surveys.survey'),
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='surveys.appuser')),
                ('option', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='surveys.option')),
            ],
            options={
                'db_table': 'answer',
                'unique_together': {('user', 'option')},
            },
        ),
        migrations.CreateModel(
            name='SurveyAdministrator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('survey', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='surveys.survey')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='surveys.appuser')),
            ],
            options={
                'db_table': 'survey_administrator',
                'unique_together': {('user', 'survey')},
            },
        ),
        migrations.RunSQL(
            '''
            -- Функция для генерации минимального положительного числа
            CREATE OR REPLACE FUNCTION assign_option_number()
            RETURNS TRIGGER AS $$
            DECLARE
                next_number INT;
            BEGIN
                IF NEW.number IS NULL THEN
                    -- Найти минимальное положительное число, которое отсутствует для данного question_id
                    SELECT MIN(number + 1) 
                    INTO next_number
                    FROM option
                    WHERE question_id = NEW.question_id
                      AND NOT EXISTS (
                          SELECT 1 
                          FROM option 
                          WHERE question_id = NEW.question_id AND number = number + 1
                      );

                    -- Если все заняты, начать с 1
                    NEW.number := COALESCE(next_number, 1);
                END IF;
                RETURN NEW;
            END;
            $$ LANGUAGE plpgsql;

            -- Триггер для таблицы OPTION
            CREATE TRIGGER option_number_trigger
            BEFORE INSERT ON option
            FOR EACH ROW
            EXECUTE FUNCTION assign_option_number();


            -- Функция для пересчёта номеров после удаления
            CREATE OR REPLACE FUNCTION renumber_options()
            RETURNS TRIGGER AS $$
            BEGIN
                -- Обновить номера оставшихся опций
                UPDATE option
                SET number = subquery.new_number
                FROM (
                    SELECT id, ROW_NUMBER() OVER (ORDER BY number) AS new_number
                    FROM option
                    WHERE question_id = OLD.question_id
                ) AS subquery
                WHERE option.id = subquery.id;

                RETURN NULL;
            END;
            $$ LANGUAGE plpgsql;

            -- Триггер для вызова функции после удаления
            CREATE TRIGGER renumber_options_trigger
            AFTER DELETE ON option
            FOR EACH ROW
            EXECUTE FUNCTION renumber_options();
            ''',
            reverse_sql='''
               -- Команды для отмены миграции
               DROP TRIGGER IF EXISTS option_number_trigger ON option;
               DROP FUNCTION IF EXISTS assign_option_number;
               DROP TRIGGER IF EXISTS renumber_options_trigger ON option;
               DROP FUNCTION IF EXISTS renumber_options;
               '''
        ),
    ]
